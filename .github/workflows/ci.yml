name: CI

on:
  push:
    branches: [ main, develop, ci-testing ]
  pull_request:
    branches: [ main, develop, ci-testing ]

env:
  GO_VERSION: "1.21"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        go build -v -ldflags="-w -s" -o crystal-ls main.go
        ./crystal-ls --version
    
    - name: Build binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        go build -v -ldflags="-w -s" -o crystal-ls.exe main.go
        echo "--version" | .\crystal-ls.exe
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: crystal-ls-${{ matrix.os }}
        path: |
          crystal-ls*
          !crystal-ls.exe.manifest

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test, build]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: crystal-ls-ubuntu-latest
    
    - name: Make binary executable
      run: chmod +x crystal-ls
    
    - name: Test LSP initialization
      run: |
        # Start the language server in background
        ./crystal-ls &
        LSP_PID=$!
        
        # Give it a moment to start
        sleep 1
        
        # Test initialization request
        echo '{"jsonrpc":"2.0","id":1,"method":"initialize","params":{"processId":null,"rootUri":"file:///tmp","capabilities":{}}}' | ./crystal-ls || true
        
        # Clean up
        kill $LSP_PID || true
